@using Kendo.Mvc.UI
@using VegiJ.Web.MVC.Areas.Administration.Models
@model VegiJ.Web.MVC.Areas.Administration.Models.EventEntityViewModel

@{
    ViewBag.Title = "Administrate Events";
}

<h2>Administrate the Events in VegiJ</h2>
@{
    var selectItemAuthor = (SelectListItem)ViewData["defaultAuthor"];
    var initialAuthor = new AuthorViewModel
    {
        ID = Guid.Parse(selectItemAuthor.Value),
        UserName = selectItemAuthor.Text
    };

}
<div class="demo-section k-content wide">
    @(Html.Kendo().Grid<EventEntityViewModel>()
          .Name("grid")
          .Columns(columns =>
          {
              columns.Bound(p => p.Name).Width(200);
              columns.Bound(p => p.Place).Width(200);
              columns.Bound(p => p.StartTime).Width(200).HtmlAttributes(new
                    {
                        @class = "templateCell"

                    })
                        .EditorTemplateName("DateTimePickerTemplate")
                        .Format("{0:g}");
              columns.Bound(p => p.IsApproved).Width(120);
              columns.Bound(p => p.Author.ID).Width(120).EditorTemplateName("AuthorDropDownListTemplate").ClientTemplate("#:Author.UserName#");

              columns.Command(command =>
              {
                  command.Edit();
                  command.Destroy();
              }).Width(200);
          })
          .ToolBar(toolbar => toolbar.Create())
          .Editable(editable => editable.Mode(GridEditMode.InLine))
          .Pageable()
          .Sortable()
          .Scrollable()
          .HtmlAttributes(new { style = "height:550px;" })
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Events(events => events.Error("error_handler"))
              .Model(model =>
              {
                  model.Id(p => p.ID);
                  model.Field<Guid>(p => p.ID).DefaultValue(Guid.Empty);
                  model.Field(p => p.Author).DefaultValue(initialAuthor);
                  model.Field(p => p.Author.ID).DefaultValue(initialAuthor.ID);
                  model.Field(p => p.StartTime).DefaultValue(DateTime.Now);
              })
              .Read(read => read.Action("Editing_Read", "EventsEditing"))
              .Create(create => create.Action("Editing_Create", "EventsEditing")).Read("Editing_Read", "EventsEditing")
              .Update(update => update.Action("Editing_Update", "EventsEditing"))
              .Destroy(destroy => destroy.Action("Editing_Destroy", "EventsEditing"))
          )
    )
</div>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>